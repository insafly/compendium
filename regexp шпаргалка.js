// [] - группы символов
// [^...] Любой из символов, не указанных в скобках
// . Любой символ, кроме перевода строки или другого разделителя Unicode-строки
// \w Любой текстовый ASCII-символ. Эквивалентно [a-zA-Z0-9_]
// \W Любой символ, не являющийся текстовым ASCII-символом. Эквивалентно [^a-zA-Z0-9_]
// \s Любой пробельный символ из набора Unicode
// \S Любой непробельный символ из набора Unicode. Обратите внимание, что символы \w и \S – это не одно и то же
// \d Любые ASCII-цифры. Эквивалентно [0-9]
// \D Любой символ, отличный от ASCII-цифр. Эквивалентно [^0-9] 
// [\b] Литерал символа «забой»

// Символы повторения в регулярных выражениях
// {n,m} Соответствует предшествующему шаблону, повторенному не менее n и не более m раз
// {n,} Соответствует предшествующему шаблону, повторенному n или более раз
// {n} Соответствует в точности n экземплярам предшествующего шаблона
// ? Соответствует нулю или одному экземпляру предшествующего шаблона; пред- шествующий шаблон является необязательным. Эквивалентно {0,1}
// + Соответствует одному или более экземплярам предшествующего шаблона. Эк- вивалентно {1,}
// * Соответствует нулю или более экземплярам предшествующего шаблона. Эк- вивалентно {0,}

// Символы регулярных выражений выбора из альтернатив, группировки и ссылки
// | служит для разделения альтернатив
// () служат для группировки либо для указания "необязательности" шаблона; определение подшаблонов внутри шаблона
// | Альтернатива. Соответствует либо подвыражению слева, либо подвыражению справа.
// (...) Группировка. Группирует элементы в единое целое, которое может использо- ваться с символами *, +, ?, | и т. п. Также запоминает символы, соответствующие этой группе для использования в последующих ссылках.
// (?:...) Только группировка. Группирует элементы в единое целое, но не запоминает символы, соответствующие этой группе.
// \n Соответствует тем же символам, которые были найдены при сопоставлении с группой с номером n. Группы – это подвыражения внутри скобок (возможно, вложенных). Номера группам присваиваются путем подсчета левых скобок сле- ва направо. Группы, сформированные с помощью символов (?:, не нумеруются.

// Якорные символы регулярных выражений
// ^ Соответствует началу строкового выражения или началу строки при много- строчном поиске.
// $ Соответствует концу строкового выражения или концу строки при многостроч- ном поиске.
// \b Соответствует границе слова, т. е. соответствует позиции между символом \w и символом \W или между символом \w и началом или концом строки. (Однако обратите внимание, что [\b] соответствует символу забоя.)
// \B Соответствует позиции, не являющейся границей слов.
// (?=p)­ Позитивная опережающая проверка на последующие символы. Требует, чтобы последующие символы соответствовали шаблону p, но не включает эти симво- лы в найденную строку.
// (?!p) Негативная опережающая проверка на последующие символы. Требует, чтобы следующие символы не соответствовали шаблону p.

// Флаги регулярных выражений
// i Выполняет поиск, нечувствительный к регистру.
// g Выполняет глобальный поиск, т. е. находит все соответствия, а не останавлива-
// ется после первого из них.
// m Многострочный режим. ^ соответствует началу строки или началу всего стро-
// кового выражения, а $ – концу строки или всего выражения.

// методы строк
// str.search(regexp) - возвращает либо позицию первого символа найденной подстро- ки, либо –1
// Метод replace() выполняет операцию поиска с заменой. Он принимает в качестве первого аргумента регулярное выражение, а в качестве второго – строку замены.
// Метод match() – это наиболее общий из методов класса String, использующих ре- гулярные выражения. Он принимает в качестве единственного аргумента регу- лярное выражение (или преобразует свой аргумент в регулярное выражение, пе- редав его конструктору RegExp()) и возвращает массив, содержащий результаты поиска. 
// split() - Этот метод разбивает строку, для которой он вызван, на массив подстрок, используя аргумент в качестве разделителя.

// class RegExp; sample: new­ RegExp("\\d{5}",­"g");
// exec() - поиск по шаблону
// test() - принимает строку и возвращает true, если строка соответствует регулярному вы- ражению

const regexp = /((ab|cd)+|ef)/;

console.log(regexp.test('bacbacba'))